// <auto-generated />
using System;
using MSIT161_B_PriAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MSIT161_B_PriAPI.Migrations
{
    [DbContext(typeof(dbMSTI161_B_ProjectContext))]
    partial class dbMSTI161_B_ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("BfUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BfUserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TChatImage", b =>
                {
                    b.Property<int>("FChatImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fChatImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FChatImageId"));

                    b.Property<int>("FChatId")
                        .HasColumnType("int")
                        .HasColumnName("fChatId");

                    b.Property<string>("FImageData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fImageData");

                    b.HasKey("FChatImageId")
                        .HasName("PK_ChatImages");

                    b.HasIndex("FChatId");

                    b.ToTable("tChatImages", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TColor", b =>
                {
                    b.Property<int>("FColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fColorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FColorId"));

                    b.Property<string>("FColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fColorName");

                    b.HasKey("FColorId");

                    b.ToTable("tColor", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCondition", b =>
                {
                    b.Property<int>("FConditionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fConditionsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FConditionsId"));

                    b.Property<string>("FConditionsName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fConditionsName");

                    b.HasKey("FConditionsId");

                    b.ToTable("tConditions", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCoupon", b =>
                {
                    b.Property<int>("FCouponCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fCoupon_Code_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FCouponCodeId"));

                    b.Property<string>("CouponDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .HasColumnName("coupon_description")
                        .IsFixedLength();

                    b.Property<string>("FCouponCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fCoupon_code");

                    b.Property<string>("FCouponCodeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fCoupon_Code_Name");

                    b.Property<DateTime>("FCouponCreatday")
                        .HasColumnType("datetime")
                        .HasColumnName("fCoupon_Creatday");

                    b.Property<double>("FCouponDiscount")
                        .HasColumnType("float")
                        .HasColumnName("fCoupon_Discount");

                    b.Property<DateTime?>("FCouponEndday")
                        .HasColumnType("datetime")
                        .HasColumnName("fCoupon_endday");

                    b.Property<int>("FCouponFrom")
                        .HasColumnType("int")
                        .HasColumnName("fCoupon_from");

                    b.Property<bool?>("FCouponState")
                        .HasColumnType("bit")
                        .HasColumnName("fCoupon_state");

                    b.Property<decimal?>("MinSellMoney")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("minSellMoney");

                    b.HasKey("FCouponCodeId")
                        .HasName("PK_Coupon");

                    b.HasIndex("FCouponFrom");

                    b.ToTable("tCoupon", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCouponRedemption", b =>
                {
                    b.Property<int>("FCouponRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fCoupon_Redemption_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FCouponRedemptionId"));

                    b.Property<int>("FCouponCodeId")
                        .HasColumnType("int")
                        .HasColumnName("fCoupon_Code_ID");

                    b.Property<DateTime?>("FCouponGetDate")
                        .HasColumnType("datetime")
                        .HasColumnName("fCoupon_Get_Date");

                    b.Property<int?>("FCouponUsageCount")
                        .HasColumnType("int")
                        .HasColumnName("fCoupon_Usage_Count");

                    b.Property<DateTime?>("FCouponUseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("fCoupon_Use_Date");

                    b.Property<bool?>("FCouponUseState")
                        .HasColumnType("bit")
                        .HasColumnName("fCoupon_UseState");

                    b.Property<int>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUser_ID");

                    b.HasKey("FCouponRedemptionId");

                    b.HasIndex("FCouponCodeId");

                    b.HasIndex("FUserId");

                    b.ToTable("tCoupon_Redemption", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TFriend", b =>
                {
                    b.Property<int>("FInvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fInvitation_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FInvitationId"));

                    b.Property<int>("FFriendUserId")
                        .HasColumnType("int")
                        .HasColumnName("fFriendUserId");

                    b.Property<DateTime>("FInvitationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("fInvitationTime");

                    b.Property<int>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FInvitationId");

                    b.HasIndex("FFriendUserId");

                    b.HasIndex("FUserId");

                    b.ToTable("tFriends", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TLoginRecord", b =>
                {
                    b.Property<int>("FLoginRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fLoginRecord_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FLoginRecordId"));

                    b.Property<string>("FLoginIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fLoginIp");

                    b.Property<byte>("FLoginState")
                        .HasColumnType("tinyint")
                        .HasColumnName("fLoginState");

                    b.Property<DateTime>("FLoginTime")
                        .HasColumnType("datetime")
                        .HasColumnName("fLoginTime");

                    b.Property<int>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FLoginRecordId");

                    b.HasIndex("FUserId");

                    b.ToTable("tLoginRecord", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TMemberChat", b =>
                {
                    b.Property<int>("FChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fChatId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FChatId"));

                    b.Property<int?>("FChatImageId")
                        .HasColumnType("int")
                        .HasColumnName("fChatImageId");

                    b.Property<string>("FMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fMessage");

                    b.Property<int>("FReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("fReceiverId");

                    b.Property<byte[]>("FSendTime")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fSendTime");

                    b.Property<int>("FSenderId")
                        .HasColumnType("int")
                        .HasColumnName("fSenderId");

                    b.HasKey("FChatId")
                        .HasName("PK_MemberChat");

                    b.HasIndex("FChatImageId");

                    b.HasIndex("FReceiverId");

                    b.HasIndex("FSenderId");

                    b.ToTable("tMemberChat", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TNotifyType", b =>
                {
                    b.Property<int>("FNotifyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fNotifyType_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FNotifyTypeId"));

                    b.Property<string>("FNotifyType")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("fNotifyType");

                    b.HasKey("FNotifyTypeId");

                    b.ToTable("tNotifyType", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TOrderChangeReason", b =>
                {
                    b.Property<int>("FOrderChangeReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fOrderChangeReason_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FOrderChangeReasonId"));

                    b.Property<string>("FOrderChangeReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fOrderChangeReason");

                    b.HasKey("FOrderChangeReasonId");

                    b.ToTable("tOrderChangeReason", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TPart", b =>
                {
                    b.Property<int>("FPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fPart_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FPartId"));

                    b.Property<string>("FPartName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("fPartName");

                    b.HasKey("FPartId");

                    b.ToTable("tPart", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TPayMethod", b =>
                {
                    b.Property<int>("FPayMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fPayMethod_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FPayMethodId"));

                    b.Property<string>("FPayMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fPayMethod");

                    b.HasKey("FPayMethodId");

                    b.ToTable("tPayMethod", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwcomment", b =>
                {
                    b.Property<int>("FCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fComment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FCommentId"));

                    b.Property<bool?>("AnonymousUser")
                        .HasColumnType("bit")
                        .HasColumnName("anonymousUser");

                    b.Property<string>("FComment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fComment");

                    b.Property<DateOnly?>("FCommentDate")
                        .HasColumnType("date")
                        .HasColumnName("fCommentDate");

                    b.Property<int?>("FProductId")
                        .HasColumnType("int")
                        .HasColumnName("fProduct_Id");

                    b.Property<double?>("FScore")
                        .HasColumnType("float")
                        .HasColumnName("fScore");

                    b.Property<string>("FSellerReply")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fSellerReply");

                    b.Property<int?>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FCommentId")
                        .HasName("PK_tCommand");

                    b.HasIndex("FProductId");

                    b.HasIndex("FUserId");

                    b.ToTable("tRTWComment", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwnotify", b =>
                {
                    b.Property<int>("FNotifyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fNotify_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FNotifyId"));

                    b.Property<bool?>("FIsNotRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fIsNotRead");

                    b.Property<string>("FNotify")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fNotify");

                    b.Property<bool?>("FNotifyState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fNotifyState");

                    b.Property<int?>("FNotifyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("fNotifyType_Id");

                    b.Property<int?>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FNotifyId");

                    b.HasIndex("FNotifyTypeId");

                    b.HasIndex("FUserId");

                    b.ToTable("tRTWNotify", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtworder", b =>
                {
                    b.Property<int>("FOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fOrder_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FOrderId"));

                    b.Property<string>("FAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fAddress");

                    b.Property<bool>("FCancel")
                        .HasColumnType("bit")
                        .HasColumnName("fCancel");

                    b.Property<int?>("FCouponCodeId")
                        .HasColumnType("int")
                        .HasColumnName("fCoupon_Code_Id");

                    b.Property<bool>("FFinished")
                        .HasColumnType("bit")
                        .HasColumnName("fFinished");

                    b.Property<DateTime?>("FFinishedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("fFinishedTime");

                    b.Property<int?>("FOrderChangeReasonId")
                        .HasColumnType("int")
                        .HasColumnName("fOrderChangeReason_Id");

                    b.Property<string>("FOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fOrder_Number");

                    b.Property<int>("FPayMethodId")
                        .HasColumnType("int")
                        .HasColumnName("fPayMethod_Id");

                    b.Property<decimal?>("FPrice")
                        .HasColumnType("money")
                        .HasColumnName("fPrice");

                    b.Property<int>("FShipMethodId")
                        .HasColumnType("int")
                        .HasColumnName("fShipMethod_Id");

                    b.Property<int>("FShipStateId")
                        .HasColumnType("int")
                        .HasColumnName("fShipState_Id");

                    b.Property<DateTime>("FTime")
                        .HasColumnType("datetime")
                        .HasColumnName("fTime");

                    b.Property<int?>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FOrderId")
                        .HasName("PK_tOrder");

                    b.HasIndex("FCouponCodeId");

                    b.HasIndex("FOrderChangeReasonId");

                    b.HasIndex("FPayMethodId");

                    b.HasIndex("FShipMethodId");

                    b.HasIndex("FShipStateId");

                    b.HasIndex("FUserId");

                    b.ToTable("tRTWOrder", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtworderDetail", b =>
                {
                    b.Property<int>("FOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fOrderDetail_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FOrderDetailId"));

                    b.Property<int?>("FOrderId")
                        .HasColumnType("int")
                        .HasColumnName("fOrder_Id");

                    b.Property<int?>("FPrice")
                        .HasColumnType("int")
                        .HasColumnName("fPrice");

                    b.Property<int?>("FProductDetailId")
                        .HasColumnType("int")
                        .HasColumnName("fProductDetail_Id");

                    b.Property<int?>("FQty")
                        .HasColumnType("int")
                        .HasColumnName("fQTY");

                    b.HasKey("FOrderDetailId")
                        .HasName("PK_tOrderDetail");

                    b.HasIndex("FOrderId");

                    b.HasIndex("FProductDetailId");

                    b.ToTable("tRTWOrderDetail", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproduct", b =>
                {
                    b.Property<int>("FProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fProduct_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FProductId"));

                    b.Property<int?>("FConditionsId")
                        .HasColumnType("int")
                        .HasColumnName("fConditionsId");

                    b.Property<string>("FGender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fGender");

                    b.Property<decimal>("FOriginPrice")
                        .HasColumnType("money")
                        .HasColumnName("fOriginPrice");

                    b.Property<int>("FPartId")
                        .HasColumnType("int")
                        .HasColumnName("fPart_Id");

                    b.Property<string>("FProductIllustrate")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("fProductIllustrate");

                    b.Property<string>("FProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fProductName");

                    b.Property<int>("FTagId")
                        .HasColumnType("int")
                        .HasColumnName("fTag_Id");

                    b.Property<int>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.Property<bool?>("Fstate")
                        .HasColumnType("bit")
                        .HasColumnName("fstate");

                    b.HasKey("FProductId");

                    b.HasIndex("FConditionsId");

                    b.HasIndex("FPartId");

                    b.HasIndex("FTagId");

                    b.HasIndex("FUserId");

                    b.ToTable("tRTWProduct", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproductDetail", b =>
                {
                    b.Property<int>("FProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fProductDetail_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FProductDetailId"));

                    b.Property<int?>("FColorId")
                        .HasColumnType("int")
                        .HasColumnName("fColorId");

                    b.Property<int?>("FProductId")
                        .HasColumnType("int")
                        .HasColumnName("fProduct_Id");

                    b.Property<int?>("FProductImageId")
                        .HasColumnType("int")
                        .HasColumnName("fProductImage_Id");

                    b.Property<int?>("FQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("fQTY");

                    b.Property<int?>("FSizeId")
                        .HasColumnType("int")
                        .HasColumnName("fSizeId");

                    b.HasKey("FProductDetailId");

                    b.HasIndex("FColorId");

                    b.HasIndex("FProductId");

                    b.HasIndex("FProductImageId");

                    b.HasIndex("FSizeId");

                    b.ToTable("tRTWProductDetail", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproductImage", b =>
                {
                    b.Property<int>("FProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fProductImage_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FProductImageId"));

                    b.Property<int?>("FProductId")
                        .HasColumnType("int")
                        .HasColumnName("fProduct_Id");

                    b.Property<string>("FProductImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fProductImage");

                    b.HasKey("FProductImageId")
                        .HasName("PK_tProductImage");

                    b.ToTable("tRTWProductImage", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwshoppingCart", b =>
                {
                    b.Property<int>("FShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fShoppingCart_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FShoppingCartId"));

                    b.Property<DateOnly?>("FAddTime")
                        .HasColumnType("date")
                        .HasColumnName("fAddTime");

                    b.Property<int?>("FProductDetailId")
                        .HasColumnType("int")
                        .HasColumnName("fProductDetail_Id");

                    b.Property<string>("FQty")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("fQTY")
                        .IsFixedLength();

                    b.Property<int?>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FShoppingCartId");

                    b.HasIndex("FProductDetailId");

                    b.HasIndex("FUserId");

                    b.ToTable("tRTWShoppingCart", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TShipMethod", b =>
                {
                    b.Property<int>("FShipMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fShipMethod_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FShipMethodId"));

                    b.Property<string>("FNeedTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fNeedTime");

                    b.Property<string>("FShipMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fShipMethod");

                    b.HasKey("FShipMethodId");

                    b.ToTable("tShipMethod", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TShipState", b =>
                {
                    b.Property<int>("FShipStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fShipState_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FShipStateId"));

                    b.Property<string>("FShipState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fShipState");

                    b.HasKey("FShipStateId");

                    b.ToTable("tShipState", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TSize", b =>
                {
                    b.Property<int>("FSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fSizeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FSizeId"));

                    b.Property<string>("FSizeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fSizeName");

                    b.HasKey("FSizeId");

                    b.ToTable("tSizes", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TTag", b =>
                {
                    b.Property<int>("FTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fTag_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FTagId"));

                    b.Property<int?>("FPartId")
                        .HasColumnType("int")
                        .HasColumnName("fPart_Id");

                    b.Property<string>("FTagName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fTagName");

                    b.HasKey("FTagId");

                    b.HasIndex("FPartId");

                    b.ToTable("tTag", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TUser", b =>
                {
                    b.Property<int>("FUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FUserId"));

                    b.Property<string>("FAddress")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("fAddress");

                    b.Property<DateTime?>("FBirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("fBirthDate");

                    b.Property<string>("FGender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fGender");

                    b.Property<string>("FInvitationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fInvitationCode");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fName");

                    b.Property<string>("FProfileImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fProfileImage");

                    b.Property<DateTime>("FRegistrationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("fRegistrationTime");

                    b.Property<DateTime>("FUpdatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("fUpdatedTime");

                    b.Property<byte>("FUserIsSeller")
                        .HasColumnType("tinyint")
                        .HasColumnName("fUserIsSeller");

                    b.Property<int>("FUserLevel")
                        .HasColumnType("int")
                        .HasColumnName("fUserLevel");

                    b.HasKey("FUserId")
                        .HasName("PK_tUser");

                    b.ToTable("tUsers", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TUserTag", b =>
                {
                    b.Property<int>("FUserTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fUserTag_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FUserTagId"));

                    b.Property<int>("FTagId")
                        .HasColumnType("int")
                        .HasColumnName("fTagId");

                    b.Property<byte>("FTagNotification")
                        .HasColumnType("tinyint")
                        .HasColumnName("fTagNotification");

                    b.Property<int>("FUserId")
                        .HasColumnType("int")
                        .HasColumnName("fUserId");

                    b.HasKey("FUserTagId");

                    b.HasIndex("FTagId");

                    b.HasIndex("FUserId");

                    b.ToTable("tUserTag", (string)null);
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUser", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "BfUser")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("BfUserId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUsers_tUsers");

                    b.Navigation("BfUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserRole", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.AspNetRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSIT161_B_PriAPI.Models.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUserToken", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TChatImage", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TMemberChat", "FChat")
                        .WithMany("TChatImages")
                        .HasForeignKey("FChatId")
                        .IsRequired()
                        .HasConstraintName("FK_tChatImages_tMemberChat1");

                    b.Navigation("FChat");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCoupon", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FCouponFromNavigation")
                        .WithMany("TCoupons")
                        .HasForeignKey("FCouponFrom")
                        .IsRequired()
                        .HasConstraintName("FK_tCoupon_tUsers");

                    b.Navigation("FCouponFromNavigation");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCouponRedemption", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TCoupon", "FCouponCode")
                        .WithMany("TCouponRedemptions")
                        .HasForeignKey("FCouponCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_tCoupon_Redemption_tCoupon");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TCouponRedemptions")
                        .HasForeignKey("FUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tCoupon_Redemption_tUser");

                    b.Navigation("FCouponCode");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TFriend", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FFriendUser")
                        .WithMany("TFriendFFriendUsers")
                        .HasForeignKey("FFriendUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tFriends_tUser1");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TFriendFUsers")
                        .HasForeignKey("FUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tFriends_tUser");

                    b.Navigation("FFriendUser");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TLoginRecord", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TLoginRecords")
                        .HasForeignKey("FUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tLoginRecord_tUser");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TMemberChat", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TChatImage", "FChatImage")
                        .WithMany("TMemberChats")
                        .HasForeignKey("FChatImageId")
                        .HasConstraintName("FK_tMemberChat_tChatImages1");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FReceiver")
                        .WithMany("TMemberChatFReceivers")
                        .HasForeignKey("FReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_tMemberChat_tUsers1");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FSender")
                        .WithMany("TMemberChatFSenders")
                        .HasForeignKey("FSenderId")
                        .IsRequired()
                        .HasConstraintName("FK_tMemberChat_tUsers");

                    b.Navigation("FChatImage");

                    b.Navigation("FReceiver");

                    b.Navigation("FSender");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwcomment", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TRtwproduct", "FProduct")
                        .WithMany("TRtwcomments")
                        .HasForeignKey("FProductId")
                        .HasConstraintName("FK_tRTWCommand_tRTWProduct");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TRtwcomments")
                        .HasForeignKey("FUserId")
                        .HasConstraintName("FK_tRTWComment_tUsers");

                    b.Navigation("FProduct");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwnotify", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TNotifyType", "FNotifyType")
                        .WithMany("TRtwnotifies")
                        .HasForeignKey("FNotifyTypeId")
                        .HasConstraintName("FK_tRTWNotify_tNotifyType");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TRtwnotifies")
                        .HasForeignKey("FUserId")
                        .HasConstraintName("FK_tRTWNotify_tUser");

                    b.Navigation("FNotifyType");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtworder", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TCoupon", "FCouponCode")
                        .WithMany("TRtworders")
                        .HasForeignKey("FCouponCodeId")
                        .HasConstraintName("FK_tRTWOrder_tCoupon");

                    b.HasOne("MSIT161_B_PriAPI.Models.TOrderChangeReason", "FOrderChangeReason")
                        .WithMany("TRtworders")
                        .HasForeignKey("FOrderChangeReasonId")
                        .HasConstraintName("FK_tRTWOrder_tOrderChangeReason");

                    b.HasOne("MSIT161_B_PriAPI.Models.TPayMethod", "FPayMethod")
                        .WithMany("TRtworders")
                        .HasForeignKey("FPayMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_tRTWOrder_tPayMethod");

                    b.HasOne("MSIT161_B_PriAPI.Models.TShipMethod", "FShipMethod")
                        .WithMany("TRtworders")
                        .HasForeignKey("FShipMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_tRTWOrder_tShipMethod");

                    b.HasOne("MSIT161_B_PriAPI.Models.TShipState", "FShipState")
                        .WithMany("TRtworders")
                        .HasForeignKey("FShipStateId")
                        .IsRequired()
                        .HasConstraintName("FK_tRTWOrder_tShipState");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TRtworders")
                        .HasForeignKey("FUserId")
                        .HasConstraintName("FK_tRTWOrder_tUser1");

                    b.Navigation("FCouponCode");

                    b.Navigation("FOrderChangeReason");

                    b.Navigation("FPayMethod");

                    b.Navigation("FShipMethod");

                    b.Navigation("FShipState");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtworderDetail", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TRtworder", "FOrder")
                        .WithMany("TRtworderDetails")
                        .HasForeignKey("FOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tRTWOrderDetail_tRTWOrder");

                    b.HasOne("MSIT161_B_PriAPI.Models.TRtwproductDetail", "FProductDetail")
                        .WithMany("TRtworderDetails")
                        .HasForeignKey("FProductDetailId")
                        .HasConstraintName("FK_tRTWOrderDetail_tRTWProductDetail");

                    b.Navigation("FOrder");

                    b.Navigation("FProductDetail");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproduct", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TCondition", "FConditions")
                        .WithMany("TRtwproducts")
                        .HasForeignKey("FConditionsId")
                        .HasConstraintName("FK_tRTWProduct_tConditions");

                    b.HasOne("MSIT161_B_PriAPI.Models.TPart", "FPart")
                        .WithMany("TRtwproducts")
                        .HasForeignKey("FPartId")
                        .IsRequired()
                        .HasConstraintName("FK_tRTWProduct_tPart");

                    b.HasOne("MSIT161_B_PriAPI.Models.TTag", "FTag")
                        .WithMany("TRtwproducts")
                        .HasForeignKey("FTagId")
                        .IsRequired()
                        .HasConstraintName("FK_tRTWProduct_tTag");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TRtwproducts")
                        .HasForeignKey("FUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tRTWProduct_tUsers");

                    b.Navigation("FConditions");

                    b.Navigation("FPart");

                    b.Navigation("FTag");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproductDetail", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TColor", "FColor")
                        .WithMany("TRtwproductDetails")
                        .HasForeignKey("FColorId")
                        .HasConstraintName("FK_tRTWProductDetail_tColor");

                    b.HasOne("MSIT161_B_PriAPI.Models.TRtwproduct", "FProduct")
                        .WithMany("TRtwproductDetails")
                        .HasForeignKey("FProductId")
                        .HasConstraintName("FK_tRTWProductDetail_tRTWProduct");

                    b.HasOne("MSIT161_B_PriAPI.Models.TRtwproductImage", "FProductImage")
                        .WithMany("TRtwproductDetails")
                        .HasForeignKey("FProductImageId")
                        .HasConstraintName("FK_tRTWProductDetail_tRTWProductImage");

                    b.HasOne("MSIT161_B_PriAPI.Models.TSize", "FSize")
                        .WithMany("TRtwproductDetails")
                        .HasForeignKey("FSizeId")
                        .HasConstraintName("FK_tRTWProductDetail_tSizes");

                    b.Navigation("FColor");

                    b.Navigation("FProduct");

                    b.Navigation("FProductImage");

                    b.Navigation("FSize");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwshoppingCart", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TRtwproductDetail", "FProductDetail")
                        .WithMany("TRtwshoppingCarts")
                        .HasForeignKey("FProductDetailId")
                        .HasConstraintName("FK_tRTWShoppingCart_tRTWProductDetail");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TRtwshoppingCarts")
                        .HasForeignKey("FUserId")
                        .HasConstraintName("FK_tRTWShoppingCart_tUser");

                    b.Navigation("FProductDetail");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TTag", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TPart", "FPart")
                        .WithMany("TTags")
                        .HasForeignKey("FPartId")
                        .HasConstraintName("FK_tTag_tPart");

                    b.Navigation("FPart");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TUserTag", b =>
                {
                    b.HasOne("MSIT161_B_PriAPI.Models.TTag", "FTag")
                        .WithMany("TUserTags")
                        .HasForeignKey("FTagId")
                        .IsRequired()
                        .HasConstraintName("FK_tUserTag_tTag");

                    b.HasOne("MSIT161_B_PriAPI.Models.TUser", "FUser")
                        .WithMany("TUserTags")
                        .HasForeignKey("FUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tUserTag_tUser");

                    b.Navigation("FTag");

                    b.Navigation("FUser");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TChatImage", b =>
                {
                    b.Navigation("TMemberChats");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TColor", b =>
                {
                    b.Navigation("TRtwproductDetails");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCondition", b =>
                {
                    b.Navigation("TRtwproducts");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TCoupon", b =>
                {
                    b.Navigation("TCouponRedemptions");

                    b.Navigation("TRtworders");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TMemberChat", b =>
                {
                    b.Navigation("TChatImages");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TNotifyType", b =>
                {
                    b.Navigation("TRtwnotifies");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TOrderChangeReason", b =>
                {
                    b.Navigation("TRtworders");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TPart", b =>
                {
                    b.Navigation("TRtwproducts");

                    b.Navigation("TTags");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TPayMethod", b =>
                {
                    b.Navigation("TRtworders");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtworder", b =>
                {
                    b.Navigation("TRtworderDetails");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproduct", b =>
                {
                    b.Navigation("TRtwcomments");

                    b.Navigation("TRtwproductDetails");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproductDetail", b =>
                {
                    b.Navigation("TRtworderDetails");

                    b.Navigation("TRtwshoppingCarts");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TRtwproductImage", b =>
                {
                    b.Navigation("TRtwproductDetails");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TShipMethod", b =>
                {
                    b.Navigation("TRtworders");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TShipState", b =>
                {
                    b.Navigation("TRtworders");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TSize", b =>
                {
                    b.Navigation("TRtwproductDetails");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TTag", b =>
                {
                    b.Navigation("TRtwproducts");

                    b.Navigation("TUserTags");
                });

            modelBuilder.Entity("MSIT161_B_PriAPI.Models.TUser", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("TCouponRedemptions");

                    b.Navigation("TCoupons");

                    b.Navigation("TFriendFFriendUsers");

                    b.Navigation("TFriendFUsers");

                    b.Navigation("TLoginRecords");

                    b.Navigation("TMemberChatFReceivers");

                    b.Navigation("TMemberChatFSenders");

                    b.Navigation("TRtwcomments");

                    b.Navigation("TRtwnotifies");

                    b.Navigation("TRtworders");

                    b.Navigation("TRtwproducts");

                    b.Navigation("TRtwshoppingCarts");

                    b.Navigation("TUserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
